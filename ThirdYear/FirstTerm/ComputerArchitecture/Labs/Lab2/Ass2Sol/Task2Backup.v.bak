
module regFileTask1 #(parameter noOfSelectors = 3, RegSize = 16)
 	(rst,  write_data, write_enable,read_enable, read_data, read_addr,write_addr, clk );

// defining the variables 
input  read_enable,write_enable, rst,clk; 
input [RegSize - 1:0] write_data; 
input [noOfSelectors - 1:0] read_addr, write_addr; 
output [RegSize - 1:0] read_data; 
reg[RegSize - 1:0] read_data;

// defining the 8 built in registers
reg[RegSize - 1:0] reg1; 
reg[RegSize - 1:0] reg2; 
reg[RegSize - 1:0] reg3; 
reg[RegSize - 1:0] reg4; 
reg[RegSize - 1:0] reg5; 
reg[RegSize - 1:0] reg6; 
reg[RegSize - 1:0] reg7; 
reg[RegSize - 1:0] reg8; 

// generating the inside registers
genvar i; 
generate
for(i = 0 ; i < 8; i = i + 1)
 register(.dataIn (write_data) , .dataOut (read_data)); 
endgenerate

// applying the logic depending on the read_addrector

always @(posedge clk)
    
    if (rst == 1) begin 
        reg1 = 0 ; 
        reg2 = 0 ; 
        reg3 = 0 ; 
        reg4 = 0 ; 
        reg5 = 0 ; 
        reg6 = 0 ; 
        reg7 = 0 ; 
        reg8 = 0 ; 
    end else if(write_enable == 1 && read_enable == 0 )  begin
        case (read_addr) 
        8'b000 : reg1 = write_data;
        8'b001 : reg2 = write_data;
        8'b010 : reg3 = write_data;
        8'b011 : reg4 = write_data;
        8'b100 : reg5 = write_data;
        8'b101 : reg6 = write_data;
        8'b110 : reg7 = write_data;
        8'b111 : reg8 = write_data;
        endcase 
	end 
   else if (write_enable == 0 && read_enable == 1) begin 
        case (write_addr)
        8'b000: read_data = reg1 ;
        8'b001: read_data = reg2 ;
        8'b010: read_data = reg3 ;
        8'b011: read_data = reg4 ;
        8'b100: read_data = reg5 ;
        8'b101: read_data = reg6 ;
        8'b110: read_data = reg7 ;
        8'b111: read_data = reg8 ;
        endcase 
    end 

endmodule 